{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: 'Title: Strathcona House Value Predictor'\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "by Gilbert Akuja, Tianjiao Jiang, Thamer Aldawood & Yajing Liu 2024/11/29\n",
        "## Summary:\n",
        "Our team will be working on predicting house prices using the 2023 Property Tax Assessment dataset from Strathcona County Open Data portal. The dataset provides a wealth of information about houses, including attributes like size, location, and other features. By leveraging this data, we aim to build a robust predictive model that accurately estimates house values.\n",
        "## Introduction:\n",
        "The team will be using `Ridge` which is a linear model to predict the value of houses. Ridge is a regularization model that is used for predictive modeling and mitigates over fitting, improves model stability especially when features are highly correlated. Ridge helps create robust model that generalize well to new data.\n",
        "The question we aim to answer: Can we predict house prices using publicly available housing data , and which features most influence the predictions?\n",
        "Data description: For this project we are going to use the  2023 Property Tax Assessment from Strathcona County Open Data portal. The data set contains the following attributes related to the different houses. The variables we selected for the model are: <br>\n",
        "                `meters` - numeric variable that show the size of the house <br>\n",
        "                `garage` - categorical variable where Y means there is a garage and N means no garage. <br>\n",
        "                `firepl` - categorical variable where Y means there is a fireplace and N means no fireplace<br>\n",
        "                `bdevl` - categorical variable where Y meas the building was evaluated and N means it was not evaluated<br>\n",
        "The data set was chosen for its rich feature set, adequate sample size, and public availability making it suitable for building a predictive model. \n",
        "\n",
        "\n",
        "## Methods & Results:\n",
        "\n",
        "### 1. Import all the necessary libraries for data analysis\n"
      ],
      "id": "6cf2cb13"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "#import altair_ally as aly\n",
        "import altair as alt\n",
        "import os"
      ],
      "id": "95136113",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 2. Read in dataset\n",
        "The code reads a CSV file \"named 2023 Property Tax Assessment\" into a pandas DataFrame and filters it to include only the features we are going to evaluate. The resulting DataFrame contains these specific features for further analysis.\n"
      ],
      "id": "71c5cfc4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "url = \"https://hub.arcgis.com/api/v3/datasets/e3c5b04fccdc4ddd88059a8c0b6d8160_0/downloads/data?format=csv&spatialRefId=3776&where=1%3D1\"\n",
        "housing_df = pd.read_csv(url)\n",
        "\n",
        "# Saves the dataframe to .csv in the data/ directory\n",
        "housing_df.to_csv(\"../data/2023_Property_Tax_Assessment.csv\")\n",
        "\n",
        "# Takes only the columns we need\n",
        "housing_df = housing_df[['meters','garage','firepl','bsmt','bdevl','assess_2022']]\n",
        "\n",
        "housing_df"
      ],
      "id": "a9daff12",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Validation for correct data file format\n",
        "file_path = \"data/2023_Property_Tax_Assessment.csv\"\n",
        "\n",
        "if not file_path.endswith(\".csv\"):\n",
        "    raise ValueError(\"File format not supported.\")\n",
        "else: \n",
        "    print(\"✅ File format validation passed: File is a CSV.\")\n",
        "\n",
        "# Validation for correct column names\n",
        "expected_cols = {\"meters\", \"garage\", \"firepl\", \"bsmt\", \"bdevl\", \"assess_2022\"}\n",
        "actual_cols = set(housing_df.columns)\n",
        "\n",
        "if actual_cols == expected_cols:\n",
        "    print(\"✅ Column name validation passed: All expected columns are present.\")\n",
        "else:\n",
        "    missing = expected_cols - actual_cols\n",
        "    extra = actual_cols - expected_cols\n",
        "    print(\"Column names validation failed:\")\n",
        "    if missing:\n",
        "        print(f\" Missing columns: {missing}\")\n",
        "    if extra:\n",
        "        print(f\" Extra columns: {extra}\")\n",
        "\n",
        "# Validation for No Empty Observations\n",
        "empty = housing_df.isna().all(axis = 1).sum()\n",
        "\n",
        "if empty == 0:\n",
        "    print(\"✅ Empty observations validation passed: No empty rows.\")\n",
        "else:\n",
        "    print(f\" Empty observations validation failed: Found {empty} empty rows.\")\n",
        "\n",
        "#Validation for missingness not beyond expected threshold\n",
        "expected_threshold = 0\n",
        "missing = housing_df.isna().mean()\n",
        "\n",
        "all_cols_passed = True\n",
        "\n",
        "for col, percentage in missing.items():\n",
        "    if percentage > expected_threshold:\n",
        "        all_cols_passed = False\n",
        "        print(f\"Column '{col}' exceeds the missingness expected threshold ({percentage:.2%} missing).\")\n",
        "if all_cols_passed:\n",
        "    print(f\"✅ Missingness validation passed for all columns.\")\n",
        "\n",
        "#Validation for correct data types in each column \n",
        "\n",
        "expected_dtypes = { \"meters\": \"float64\",\"garage\": \"object\",\"firepl\": \"object\",\"bsmt\": \"object\", \"bdevl\": \"object\",\"assess_2022\": \"int64\"}\n",
        "\n",
        "dtype_passed = True\n",
        "\n",
        "for col, dtype in expected_dtypes.items():\n",
        "    if housing_df[col].dtypes != dtype:\n",
        "        dtype_passed = False\n",
        "        print(f\"Data type validation failed: Column '{col}' is of type {housing_df[col].dtypes}, expected {dtype}.\")\n",
        "if dtype_passed:\n",
        "    print(\"✅ Data type validation passed for all columns.\")\n",
        "\n",
        "# Validation for no duplicate observations\n",
        "duplicates = housing_df.duplicated().sum()\n",
        "\n",
        "if duplicates == 0:\n",
        "    print(\"✅ Duplicate observation validation passed: No duplicate rows found.\")\n",
        "else:\n",
        "    print(f\"Duplicate observation validation failed: Found {duplicates} duplicate rows.\")\n",
        "    # Dropping duplicates\n",
        "    housing_df = housing_df.drop_duplicates()\n",
        "    print(\"✅ Duplicates have been removed from the DataFrame.\")\n",
        "\n",
        "# Validation for no outliers or anomalous values\n",
        "outliers_detected = False\n",
        "outlier_threshold = 5000\n",
        "\n",
        "# Identify and drop outliers if the threshold is exceeded\n",
        "for col in housing_df.select_dtypes(include=[\"float64\", \"int64\"]).columns:\n",
        "    q1 = housing_df[col].quantile(0.25)\n",
        "    q3 = housing_df[col].quantile(0.75)\n",
        "    iqr = q3 - q1\n",
        "    lower_bound = q1 - 1.5 * iqr\n",
        "    upper_bound = q3 + 1.5 * iqr\n",
        "\n",
        "    outliers = housing_df[(housing_df[col] < lower_bound) | (housing_df[col] > upper_bound)]\n",
        "    num_outliers = len(outliers)\n",
        "    \n",
        "    if num_outliers > outlier_threshold:\n",
        "        outliers_detected = True\n",
        "        print(f\"Outlier validation failed: Column '{col}' has {num_outliers} outliers (threshold: {outlier_threshold}).\")\n",
        "        # Dropping the outliers\n",
        "        housing_df = housing_df[~((housing_df[col] < lower_bound) | (housing_df[col] > upper_bound))]\n",
        "        print(f\"✅ Outliers in column '{col}' have been removed from the DataFrame.\")\n",
        "    elif num_outliers > 0:\n",
        "        print(f\"Warning: Column '{col}' has {num_outliers} outliers, within acceptable threshold ({outlier_threshold}).\")\n",
        "\n",
        "if not outliers_detected:\n",
        "    print(\"✅ Outlier validation passed: No columns exceed the outlier threshold.\")\n",
        "else:\n",
        "    print(\"✅ Outliers exceeding the threshold have been removed.\")"
      ],
      "id": "3a275c5e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 3. Visualization for categorical features\n",
        "\n",
        "The code enables VegaFusion to optimize Altair data transformations for visualizations. It then creates a distribution plot of categorical features in the `housing_df` DataFrame.\n"
      ],
      "id": "ab94a4d5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "alt.data_transformers.enable(\"vegafusion\")\n",
        "\n",
        "grg0 = alt.Chart(housing_df).mark_bar().encode(\n",
        "    x = alt.X('garage', title='Garage'),\n",
        "    y = alt.Y('count()', scale = alt.Scale(domain=[0,35000]), title='House value'),\n",
        ")\n",
        "\n",
        "\n",
        "frp0 = alt.Chart(housing_df).mark_bar().encode(\n",
        "    x = alt.X('firepl', title='Fireplace'),\n",
        "    y = alt.Y('count()', scale = alt.Scale(domain=[0,35000]), title='House value'),\n",
        ")\n",
        "\n",
        "bst0 = alt.Chart(housing_df).mark_bar().encode(\n",
        "    x = alt.X('bsmt', title='Basement'),\n",
        "    y = alt.Y('count()', scale = alt.Scale(domain=[0,35000]), title='House value'),\n",
        ")\n",
        "\n",
        "bdl0 = alt.Chart(housing_df).mark_bar().encode(\n",
        "    x = alt.X('bdevl', title='Building evaluation'),\n",
        "    y = alt.Y('count()', scale = alt.Scale(domain=[0,35000]), title='House value'),\n",
        ")\n",
        "\n",
        "(grg0 | frp0 | bst0 | bdl0).properties(\n",
        "    title=\"Counts of categorical features\"\n",
        ")"
      ],
      "id": "8fc80732",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The code generates scatter plots to visualize the relationship between house assessment values (`assess_2022`) and four categorical features: `garage`, `firepl`, `bsmt`, and `bdevl`.\n"
      ],
      "id": "b7994db5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "grg = alt.Chart(housing_df).mark_point().encode(\n",
        "    x = alt.X('garage', title='Garage'),\n",
        "    y = alt.Y('assess_2022', title='House value'),\n",
        ")\n",
        "\n",
        "frp = alt.Chart(housing_df).mark_point().encode(\n",
        "    x = alt.X('firepl', title='Fireplace'),\n",
        "    y = alt.Y('assess_2022', title='House value'),\n",
        ")\n",
        "\n",
        "bst = alt.Chart(housing_df).mark_point().encode(\n",
        "    x = alt.X('bsmt', title='Basement'),\n",
        "    y = alt.Y('assess_2022', title='House value'),\n",
        ")\n",
        "\n",
        "bdl = alt.Chart(housing_df).mark_point().encode(\n",
        "    x = alt.X('bdevl', title='Building evaluation'),\n",
        "    y = alt.Y('assess_2022', title='House value'),\n",
        ")\n",
        "\n",
        "(grg | frp | bst | bdl).properties(\n",
        "    title=\"House value assessment per categorical feature\")"
      ],
      "id": "67c584e5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Visualizing the distribution of the target variable, assess_2022, using a histogram and Kernel Density Estimate (KDE) plot is a crucial step in data exploration. It helps us understand the overall distribution, identify patterns such as skewness, kurtosis, or multiple peaks, and detect outliers. By comparing the histogram and KDE, we can assess if the distribution meets the assumptions of our chosen modeling techniques. This visualization also guides decisions about preprocessing, such as applying transformations to address skewness or choosing the right algorithm for modeling. Additionally, it can uncover data quality issues, like sparse regions or missing values, prompting necessary corrections. \n"
      ],
      "id": "7875e857"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "scatter = alt.Chart(housing_df).mark_point().encode(\n",
        "    y = alt.Y('meters', title=\"Property size (meters)\"),\n",
        "    x = alt.X('assess_2022', title=\"Assessment Value\"),\n",
        "    color = alt.Color('meters', title=\"Property size (meters)\").scale(scheme='viridis')\n",
        ").properties(\n",
        "    title=\"Scatter plot of Property Size and Assessment Values (2022)\"\n",
        ")\n",
        "\n",
        "# Create a histogram and KDE plot for the 'assess_2022' column\n",
        "histogram = alt.Chart(housing_df).mark_bar().encode(\n",
        "    alt.X(\"assess_2022:Q\", bin=alt.Bin(maxbins=2000), title=\"Assessment Value\").scale(domain=(0, 2000000), clamp=True),\n",
        "    alt.Y(\"count():Q\", title=\"Frequency\"),\n",
        ").properties(\n",
        "    title=\"Distribution of House Assessment Values (2022)\"\n",
        ")\n",
        "\n",
        "kde = alt.Chart(housing_df).transform_density(\n",
        "    \"assess_2022\",\n",
        "    as_=[\"assess_2022\", \"density\"], \n",
        "    counts=True\n",
        ").mark_line(color=\"red\").encode(\n",
        "    alt.X(\"assess_2022:Q\", title=\"Assessment Value\").scale(domain=(0, 2000000), clamp=True),\n",
        "    alt.Y(\"density:Q\", title=\"Density\")\n",
        ").properties(\n",
        "    title=\"Line plot of KDE House Assessment Values (2022)\"\n",
        ")\n",
        "\n",
        "# Combine the histogram and KDE plot\n",
        "combined_chart = histogram | kde | scatter\n",
        "combined_chart.show()"
      ],
      "id": "af5e9bea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Visualizing the distribution of the target variable, assess_2022, is a crucial step in data exploration. It helps us understand the overall distribution and detect outliers.  \n",
        "We can see that the distribution of assess_2022 almost resembles a normal distribution with a very long tail on the right side due to some of the larger values we have in our dataset causing significant skewness to the right.  \n",
        "\n",
        "The scatter plot shows that the vast majority of our data points are concentrated within the 0 < meters < 2000 range, with some more within the 2000 < meters < 5000 range, and there are a few outliers in the meters > 5000 range that make it difficult to get a closer look on the majority of our data. We can see a similar story on the assess_2022 feature as it has the vast majority of points in the low-mid range and some outlying extreme values.\n",
        "\n",
        "### 4. Prepare data for training and create column transformer for feature transformation\n",
        "\n",
        "The code assigns the housing_df DataFrame into training and test datasets using an 70-30 split.\n",
        "The code then categorizes features into categorical features (e.g., `garage`, `firepl`, `bsmt`, `bdevl`) and numeric features (e.g., `meters`), applies one-hot encoding transforamtion for categorical features and standardScalar transformation for numeric features. The code created a column transformer `preprocessor` through combining these transforamtions to apply to the dataset and visualizes the `preprocessor`.\n",
        "\n",
        "We performed analysis to identify any potential issues with the relationships between features and the target, as well as between the features themselves. By detecting anomalous correlations, we can uncover redundant or highly correlated features that might lead to multicollinearity, which can negatively affect the performance of machine learning models. In particular, removing or adjusting features that are too strongly correlated ensures that the model can learn meaningful, independent relationships, improving its generalization ability and interpretability. Additionally, examining correlations helps us assess if certain features are disproportionately influencing the target variable, which could indicate bias or overfitting.\n"
      ],
      "id": "10d60c92"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "train_df, test_df = train_test_split(housing_df, test_size=0.3, random_state=123)"
      ],
      "id": "7d38b614",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.compose import make_column_transformer\n",
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
        "\n",
        "# Lists of feature names\n",
        "categorical_features = ['garage', 'firepl', 'bsmt', 'bdevl']\n",
        "numeric_features = ['meters']\n",
        "# Create the column transformer\n",
        "preprocessor = make_column_transformer(\n",
        "    (OneHotEncoder(), categorical_features),  # One-hot encode categorical columns\n",
        "    (StandardScaler(), numeric_features),  # Standardize numeric columns\n",
        ")\n",
        "\n",
        "# Show the preprocessor\n",
        "preprocessor"
      ],
      "id": "b463cada",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Validation step\n"
      ],
      "id": "aaa1e647"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define the categorical features and their expected values\n",
        "categorical_features = ['garage', 'firepl', 'bsmt', 'bdevl']\n",
        "expected_values = {'Y', 'N'}\n",
        "\n",
        "# Initialize a flag to track validation status\n",
        "all_categories_valid = True\n",
        "\n",
        "# Validate each categorical feature in the train_df\n",
        "for feature in categorical_features:\n",
        "    unique_values = set(train_df[feature].dropna().unique())  # Get unique values excluding NaNs\n",
        "    unexpected_values = unique_values - expected_values  # Find unexpected values\n",
        "\n",
        "    if unexpected_values:\n",
        "        print(f\"❌ Unexpected values in column '{feature}' in train_df: {unexpected_values}\")\n",
        "        all_categories_valid = False\n",
        "    else:\n",
        "        print(f\"✅ Category levels validation passed for column '{feature}' in train_df.\")\n",
        "\n",
        "# Final message\n",
        "if all_categories_valid:\n",
        "    print(\"✅ All categorical columns in train_df have the expected levels ('Y' and 'N').\")\n",
        "else:\n",
        "    print(\"❌ Some categorical columns in train_df have unexpected values. Please review.\")"
      ],
      "id": "43fff3e5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Check for anomalous correlations between target and features\n"
      ],
      "id": "774b919f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Apply preprocessing to train_df\n",
        "transformed_train = preprocessor.fit_transform(train_df)\n",
        "\n",
        "# Add the target variable back to the DataFrame\n",
        "transformed_train_df = pd.DataFrame(transformed_train)\n",
        "transformed_train_df.columns = ['Garage_Y', 'Garage_N', 'Fireplace_Y', 'Fireplace_N','Basement_Y', 'Basement_N',\n",
        "                                'BuildingEva_Y', 'BuildingEva_N','meters']\n",
        "# Add the target column back (assess_2022) to the transformed DataFrame\n",
        "transformed_train_df['assess_2022'] = train_df['assess_2022']\n",
        "\n",
        "# Compute correlation with the target variable\n",
        "correlation_with_target = transformed_train_df.corr()[\"assess_2022\"].drop(\"assess_2022\")\n",
        "\n",
        "# Identify features with anomalous correlations (correlation > 0.9 or < -0.9)\n",
        "threshold = 0.9\n",
        "anomalous_features = correlation_with_target[\n",
        "    (correlation_with_target.abs() > threshold)\n",
        "]\n",
        "\n",
        "if anomalous_features.empty:\n",
        "    print(\"✅ No anomalous correlations found between target and features.\")\n",
        "else:\n",
        "    print(\"❌ Anomalous correlations detected:\")\n",
        "    print(anomalous_features)"
      ],
      "id": "bd4fdecc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Check for anomalous correlations between features\n"
      ],
      "id": "d48a4756"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "correlation_matrix = transformed_train_df.corr()\n",
        "threshold = 0.9\n",
        "\n",
        "# Define pairs of features that are binary inverses of each other (which are expected to be highly correlated)\n",
        "exclude_pairs = [\n",
        "    ('Garage_Y', 'Garage_N'),\n",
        "    ('Fireplace_Y', 'Fireplace_N'),\n",
        "    ('Basement_Y', 'Basement_N'),\n",
        "    ('BuildingEva_Y', 'BuildingEva_N')\n",
        "]\n",
        "\n",
        "# Flag to check if any anomalous correlations were found\n",
        "anomalous_correlations_found = False\n",
        "\n",
        "# Iterate over the correlation matrix to check for high correlations\n",
        "for col1 in correlation_matrix.columns:\n",
        "    for col2 in correlation_matrix.columns:\n",
        "        if col1 != col2:\n",
        "            # Skip pairs that are binary inverses\n",
        "            if (col1, col2) in exclude_pairs or (col2, col1) in exclude_pairs:\n",
        "                continue\n",
        "            # Check if correlation is above threshold\n",
        "            if abs(correlation_matrix[col1][col2]) > threshold:\n",
        "                print(f\"Warning: High correlation detected between {col1} and {col2}.\")\n",
        "                anomalous_correlations_found = True\n",
        "\n",
        "# If no anomalous correlations are found, print the confirmation message\n",
        "if not anomalous_correlations_found:\n",
        "    print(\"✅ No anomalous correlations found between target and features.\")"
      ],
      "id": "70d0c87d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Note:** When performing correlation analysis on the dataset, it is important to exclude pairs of binary features that are inherently correlated due to their inverse relationship. For example, in the case of features like Garage_Y and Garage_N, one feature will always be 1 when the other is 0, and vice versa. These binary features are designed to represent the same information in different forms, and their high correlation is expected. Thus, it is not an anomaly and should not be flagged as such. To address this, we exclude these pairs from the correlation analysis, ensuring that only truly anomalous correlations—those that do not follow expected patterns—are identified. By doing so, we can avoid mistakenly flagging normal relationships between inverse binary features while still identifying potential issues in the remaining feature correlations.\n",
        "\n",
        "### 5. Train, cross validate and evaluate a Ridge regression model\n",
        "\n",
        "The code splits the features and target variable (`assess_2022`) into training and testing datasets.\n"
      ],
      "id": "77284e49"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "X_train = train_df.drop(columns=[\"assess_2022\"])\n",
        "X_test = test_df.drop(columns=[\"assess_2022\"])\n",
        "y_train = train_df[\"assess_2022\"]\n",
        "y_test = test_df[\"assess_2022\"]"
      ],
      "id": "7c28c002",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The code creates a pipeline combining the column transformer (`preprocessor`) and the Ridge Regression model. Using 5-fold cross-validation on the training data, the code evaluates the pipeline on multiple metrics and computes train and validation scores. Finally, it outputs the aggregated train and validation scores to assess the model's performance.\n"
      ],
      "id": "f03b172b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.model_selection import (\n",
        "    cross_val_score,\n",
        "    cross_validate\n",
        ")\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "# The Ridge model pipeline\n",
        "pipeline = make_pipeline(preprocessor, Ridge())\n",
        "\n",
        "# The mean and std of the cross validated scores for all metrics as a dataframe\n",
        "cross_val_results = pd.DataFrame(cross_validate(pipeline, X_train, y_train, cv=5, return_train_score=True)).agg(['mean', 'std']).round(3).T\n",
        "\n",
        "# Show the train and validation scores\n",
        "cross_val_results"
      ],
      "id": "2223240d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The code fits the pipeline on the training dataset (`X_train` and `y_train`) to train the Ridge Regression model. Then evaluates the trained pipeline on the test dataset (`X_test` and `y_test`) which calculates the R² (coefficient of determination) to measure how well the model explains the variance in the test data.\n"
      ],
      "id": "1323281c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pipeline.fit(X_train, y_train)\n",
        "pipeline.score(X_test, y_test)"
      ],
      "id": "0ab0ac3f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 6. Predict housing prices with new data\n",
        "\n",
        "This code creates a Pandas DataFrame containing information about 10 houses that we wish to predict the value of.\n"
      ],
      "id": "6c445ea6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ten_houses = {\n",
        "    'meters' : [174.23, 132.76, 90.82, 68.54, 221.30, 145.03, 102.96, 164.28, 142.79, 115.94],\n",
        "    'garage' : ['Y', 'Y', 'Y', 'N', 'Y', 'N', 'N', 'Y', 'N', 'Y'],\n",
        "    'firepl' : ['Y', 'N', 'N', 'N', 'Y', 'N', 'N', 'Y', 'Y', 'N'],\n",
        "    'bsmt' : ['Y', 'Y', 'N', 'N', 'Y', 'N', 'Y', 'N', 'Y', 'Y', ],\n",
        "    'bdevl' : ['N', 'Y', 'Y', 'N', 'Y', 'Y', 'Y', 'N', 'N', 'Y', ]\n",
        "    }\n",
        "\n",
        "X_predict = pd.DataFrame(ten_houses)\n",
        "X_predict"
      ],
      "id": "9df9a830",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This code applies the trained pipeline to predict housing prices values based on the features in the dataFrame containing new data. The predictions are stored in a new pandas DataFrame.\n"
      ],
      "id": "90ea5e98"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "y_predict = pipeline.predict(X_predict)\n",
        "y_predict = pd.DataFrame(y_predict)\n",
        "y_predict.columns = ['Predicted_Values']\n",
        "y_predict = round(y_predict, 2)"
      ],
      "id": "f9dbe2d6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The code combines the original features from the new data and the predicted values into a new pandas DataFrame. The new pandas DataFrame provides an overview of the predictions.\n"
      ],
      "id": "4f2e8657"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "predictions_df = pd.concat([X_predict,y_predict], axis = 1)\n",
        "\n",
        "# Saves prediction to a csv file\n",
        "predictions_df.to_csv(\"../data/ten_houses_predictions.csv\")\n",
        "\n",
        "predictions_df"
      ],
      "id": "3280f08a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 7. Visualization for predictions\n",
        "\n",
        "This code creates line charts to visualize the relationship between property size (`meters`) and predicted housing prices (`Predicted_Values`), colored by different categorical features. This visualization highlights how categorical features interact with property size to influence predicted house values.\n"
      ],
      "id": "550f0fe2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "mtrs = alt.Chart(predictions_df).mark_line().encode(\n",
        "    x = alt.X('meters', title=\"Property size\"),\n",
        "    y = alt.Y('Predicted_Values', title='Predicted Values'),\n",
        ").properties(\n",
        "    height = 200,\n",
        "    width = 200,\n",
        "    title = \"Property size (m^2) vs value\"\n",
        ")\n",
        "\n",
        "grg2 = alt.Chart(predictions_df).mark_line().encode(\n",
        "    x = alt.X('meters', title=\"Property size\"),\n",
        "    y = alt.Y('Predicted_Values', title='Predicted Values'),\n",
        "    color = alt.Color('garage', title=\"Garage\")\n",
        ").properties(\n",
        "    height = 200,\n",
        "    width = 200,\n",
        "    title = \"Garage\"\n",
        ")\n",
        "\n",
        "frp2 = alt.Chart(predictions_df).mark_line().encode(\n",
        "    x = alt.X('meters', title=\"Property size\"),\n",
        "    y = alt.Y('Predicted_Values', title='Predicted Values'),\n",
        "    color = alt.Color('firepl', title=\"Fireplace\")\n",
        ").properties(\n",
        "    height = 200,\n",
        "    width = 200,\n",
        "    title = \"Fireplace\"\n",
        ")\n",
        "\n",
        "bst2 = alt.Chart(predictions_df).mark_line().encode(\n",
        "    x = alt.X('meters', title=\"Property size\"),\n",
        "    y = alt.Y('Predicted_Values', title='Predicted Values'),\n",
        "    color = alt.Color('bsmt', title=\"Basement\")\n",
        ").properties(\n",
        "    height = 200,\n",
        "    width = 200,\n",
        "    title = \"Basement\"\n",
        ")\n",
        "\n",
        "bdl2 = alt.Chart(predictions_df).mark_line().encode(\n",
        "    x = alt.X('meters', title=\"Property size\"),\n",
        "    y = alt.Y('Predicted_Values', title='Predicted Values'),\n",
        "    color = alt.Color('bdevl', title=\"Building evaluation\")\n",
        ").properties(\n",
        "    height = 200,\n",
        "    width = 200,\n",
        "    title = \"Building evaluation\"\n",
        ")\n",
        "\n",
        "(mtrs & (grg2 | frp2) & (bst2 | bdl2)).properties(\n",
        "    title = \"Correlations between property size and house value, colored by different characteristics\"\n",
        ")"
      ],
      "id": "c72e60ea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Discussion\n",
        "Our findings suggest that the aforementioned 10 houses are expected to be valued at:  \n",
        "1. $536,986.06\n",
        "2. $457,896.92\n",
        "3. $361,058.34\n",
        "4. $212,406.79\n",
        "5. $700,449.74\n",
        "6. $445,227.44\n",
        "7. $344,014.38\n",
        "8. $515,563.17\n",
        "9. $419,237.26\n",
        "10. $418,244.1\n",
        "\n",
        "\n",
        "We have also noticed that there is a correlation between a house's price and its property's size, whether or not it has a garage, fireplace, basement, and whether or not the building has been evaluated.\n",
        "This is consistent with our expectations as the larger a property is, and the more features it has (basement, garage, etc.) the higher its value becomes.\n",
        "This also raises further questions such as what other features of a house or property affect its value? characteristics for future consideration include: Number of bedrooms, number of bathrooms, indoor space, outdoor space, and number of floors.  \n",
        "\n",
        "# References\n",
        "1. Strathcona Country Open Data, 2023 Property Tax Assessment. - Retrieved 2024.\n",
        "https://opendata-strathconacounty.hub.arcgis.com/datasets/e3c5b04fccdc4ddd88059a8c0b6d8160_0/explore\n",
        "2. Altair Tutorial, Exploratory Data Visualization with Altair. - Retrieved 2024.\n",
        "https://altair-viz.github.io/altair-tutorial/README.html\n",
        "3. Scikit Learn, Model selection and evaluation. - Retrieved 2024.\n",
        "https://scikit-learn.org/stable/model_selection.html\n",
        "4. FastExpert, How Much Value Does a Garage Add to a House?. - Retrieved 2024.\n",
        "https://www.fastexpert.com/blog/how-much-value-does-a-garage-add-to-a-house/\n"
      ],
      "id": "757d76ac"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/queenie/miniforge3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}